# Javascript - 실행 컨텍스트



## 1. 실행 컨텍스트란?

> ##### 실행 가능한  코드를 형상화하고 구분하는 추상적인 개념

쉽게 말하면 **실행 가능한 코드 블록이 실행되는 환경**이다. 

이 때 실행 가능한 코드는?

- **전역 코드** : 전역에 있는 코드
- **Eval 코드** : eval() 함수로 실행되는 코드
- **함수 코드** : 함수 안의 코드

이고 실행 컨텍스트가 생성되면 자바스크립트 엔진은 실행에 필요한 여러 정보들을 담을 객체를 생성한다.

```javascript

let x = 'x';

function foo() {
    let y = 'yyy';
    
    function bar() {
        let z = 'z';
        console.log(x + y + z); // 'xyz' 3. 실행!
    } // 4. bar 함수 실행 컨텍스트 종료!
    bar(); // 2. bar 함수 호출! -> bar 함수 실행 컨텍스트 생성
    // 5. foo 함수 실행 컨텍스트 종료!
}
foo(); // 1. foo 함수 호출! -> foo 함수 실행 컨텍스트 생성
// 6. 짠 코드의 끝 
```

1. 전역  
2. 전역 -> foo 함수
3. 전역 -> foo 함수 -> bar 함수
4. 전역 -> foo함수
5. 전역
6. 끝

이 순서로 콜스택이 진행된다



## 2. 실행 컨텍스트의 객체

- Variable Object
- Scope Chain
- thisValue

로 구분되며 각각 해당되는 객체를 담는다.



### 2.1 Variable Object (변수 객체)

- 변수
- 매개 변수와 인수 정보(arguments)
- 함수 선언

등의 정보를 담고 있다.

전역 컨텍스트에서는 전역 객체를 가리키고

함수 컨텍스트의 경우 활성 객체를 가리킨다.

### 2.2 Scope Chain (스코프 체인)

- 해당 전역
- 함수가 참조할 수 있는 변수
- 함수 선언 등의 정보를 가지고 있는

전역 객체 또는 활성 객체를 가리키고 있는 일종의 리스트이다.

스코프체인은 접근 할 수 있는 변수를 검색하는 역할을 한다.



### 2.3 this value

- this 값이 할당된다 



## 3. 실행 컨텍스트의 생성 과정

https://poiemaweb.com/js-execution-context ...



## 궁금한 점

Q. eval 함수?

A. 문자열을 코드로 인식하게 하는 함수이다

eval('2 + 2') // 4

## 회고 

자바스크립트 엔진이 코드를 어떻게 해석할지 궁금했는데

객체로 변수나 스코프 정보 등을 저장하고 활용하는 부분이 신기했고 동작 원리를 이해할 수 있었다.

다만 그 샐행 컨텍스트가 생기는 과정은 어려웠다.



# 멘토 코멘트 

## 칭찬할 점

이번 멘토링에서 칭찬할 점을 적어 주세요.

## 노력할 점 

이번 멘토링에서 부족한 점, 더 노력해야 할 점을 적어 주세요.

## 다음 계획 

다음 멘토링 계획을 적어 주세요.

## 그 외

다른 코멘트가 있다면 더 달아 주세요.

